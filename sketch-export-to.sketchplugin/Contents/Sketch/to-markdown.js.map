{"version":3,"sources":["webpack://exports/webpack/bootstrap","webpack://exports/./node_modules/@skpm/fs/index.js","webpack://exports/./src/parse-layers.js","webpack://exports/./src/to-markdown.js","webpack://exports/external \"buffer\"","webpack://exports/external \"sketch\""],"names":["md","imgRegex","processLayers","layer","directoryPath","type","name","match","layers","reverse","map","parseToMd","readLayers","allLayers","artboardName","layerName","text","trim","sketch","export","formats","output","overwriting","scales","split","forEach","listItem","key","content","Object","is","length","paragraph","getMdContent","saveMd","path","docName","fs","writeFileSync","doc","getSelectedDocument","sketchObject","displayName","replace","page","selectedPage","artboards","push","UI","message","selection","getSelectionFromUser","ok","selectedArtboard","err"],"mappings":";;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA,aAAa,mBAAO,CAAC,sBAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;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","file":"to-markdown.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/to-markdown.js\");\n","// TODO: async. Should probably be done with NSFileHandle and some notifications\n// TODO: file descriptor. Needs to be done with NSFileHandle\nvar Buffer = require('buffer').Buffer\n\nfunction encodingFromOptions(options, defaultValue) {\n  return options && options.encoding\n    ? String(options.encoding)\n    : (\n      options\n        ? String(options)\n        : defaultValue\n    )\n}\n\nmodule.exports.constants = {\n  F_OK: 0,\n  R_OK: 4,\n  W_OK: 2,\n  X_OK: 1\n}\n\nmodule.exports.accessSync = function(path, mode) {\n  mode = mode | 0\n  var fileManager = NSFileManager.defaultManager()\n\n  switch (mode) {\n    case 0:\n      canAccess = module.exports.existsSync(path)\n      break\n    case 1:\n      canAccess = Boolean(Number(fileManager.isExecutableFileAtPath(path)))\n      break\n    case 2:\n      canAccess = Boolean(Number(fileManager.isWritableFileAtPath(path)))\n      break\n    case 3:\n      canAccess = Boolean(Number(fileManager.isExecutableFileAtPath(path))) && Boolean(Number(fileManager.isWritableFileAtPath(path)))\n      break\n    case 4:\n      canAccess = Boolean(Number(fileManager.isReadableFileAtPath(path)))\n      break\n    case 5:\n      canAccess = Boolean(Number(fileManager.isReadableFileAtPath(path))) && Boolean(Number(fileManager.isExecutableFileAtPath(path)))\n      break\n    case 6:\n      canAccess = Boolean(Number(fileManager.isReadableFileAtPath(path))) && Boolean(Number(fileManager.isWritableFileAtPath(path)))\n      break\n    case 7:\n      canAccess = Boolean(Number(fileManager.isReadableFileAtPath(path))) && Boolean(Number(fileManager.isWritableFileAtPath(path))) && Boolean(Number(fileManager.isExecutableFileAtPath(path)))\n      break\n  }\n\n  if (!canAccess) {\n    throw new Error('Can\\'t access ' + String(path))\n  }\n}\n\nmodule.exports.appendFileSync = function(file, data, options) {\n  if (!module.exports.existsSync(file)) {\n    return module.exports.writeFileSync(file, data, options)\n  }\n\n  var handle = NSFileHandle.fileHandleForWritingAtPath(file)\n  handle.seekToEndOfFile()\n\n  var encoding = encodingFromOptions(options, 'utf8')\n\n  var nsdata = Buffer.from(data, encoding === 'NSData' || encoding === 'buffer' ? undefined : encoding).toNSData()\n\n  handle.writeData(nsdata)\n}\n\nmodule.exports.chmodSync = function(path, mode) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.setAttributes_ofItemAtPath_error({\n    NSFilePosixPermissions: mode\n  }, path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.copyFileSync = function(path, dest, flags) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.copyItemAtPath_toPath_error(path, dest, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.existsSync = function(path) {\n  var fileManager = NSFileManager.defaultManager()\n  return Boolean(Number(fileManager.fileExistsAtPath(path)))\n}\n\nmodule.exports.linkSync = function(existingPath, newPath) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.linkItemAtPath_toPath_error(existingPath, newPath, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.mkdirSync = function(path, mode) {\n  mode = mode || 0o777\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.createDirectoryAtPath_withIntermediateDirectories_attributes_error(path, false, {\n    NSFilePosixPermissions: mode\n  }, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.mkdtempSync = function(path) {\n  function makeid() {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (var i = 0; i < 6; i++)\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return text;\n  }\n  var tempPath = path + makeid()\n  module.exports.mkdirSync(tempPath)\n  return tempPath\n}\n\nmodule.exports.readdirSync = function(path) {\n  var fileManager = NSFileManager.defaultManager()\n  var paths = fileManager.subpathsAtPath(path)\n  var arr = []\n  for (var i = 0; i < paths.length; i++) {\n    arr.push(String(paths[i]))\n  }\n  return arr\n}\n\nmodule.exports.readFileSync = function(path, options) {\n  var encoding = encodingFromOptions(options, 'buffer')\n  var fileManager = NSFileManager.defaultManager()\n  var data = fileManager.contentsAtPath(path)\n  var buffer = Buffer.from(data)\n\n  if (encoding === 'buffer') {\n    return buffer\n  } else if (encoding === 'NSData') {\n    return buffer.toNSData()\n  } else {\n    return buffer.toString(encoding)\n  }\n}\n\nmodule.exports.readlinkSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.destinationOfSymbolicLinkAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n\n  return String(result)\n}\n\nmodule.exports.realpathSync = function(path) {\n  return String(NSString.stringByResolvingSymlinksInPath(path))\n}\n\nmodule.exports.renameSync = function(oldPath, newPath) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.moveItemAtPath_toPath_error(oldPath, newPath, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.rmdirSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.removeItemAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.statSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.attributesOfItemAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n\n  return {\n    dev: String(result.NSFileDeviceIdentifier),\n    // ino: 48064969, The file system specific \"Inode\" number for the file.\n    mode: result.NSFileType | result.NSFilePosixPermissions,\n    nlink: Number(result.NSFileReferenceCount),\n    uid: String(result.NSFileOwnerAccountID),\n    gid: String(result.NSFileGroupOwnerAccountID),\n    // rdev: 0, A numeric device identifier if the file is considered \"special\".\n    size: Number(result.NSFileSize),\n    // blksize: 4096, The file system block size for i/o operations.\n    // blocks: 8, The number of blocks allocated for this file.\n    atimeMs: Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    mtimeMs: Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    ctimeMs: Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    birthtimeMs: Number(result.NSFileCreationDate.timeIntervalSince1970()) * 1000,\n    atime: new Date(Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5), // the 0.5 comes from the node source. Not sure why it's added but in doubt...\n    mtime: new Date(Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5),\n    ctime: new Date(Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5),\n    birthtime: new Date(Number(result.NSFileCreationDate.timeIntervalSince1970()) * 1000 + 0.5),\n    isBlockDevice: function() { return result.NSFileType === NSFileTypeBlockSpecial },\n    isCharacterDevice: function() { return result.NSFileType === NSFileTypeCharacterSpecial },\n    isDirectory: function() { return result.NSFileType === NSFileTypeDirectory },\n    isFIFO: function() { return false },\n    isFile: function() { return result.NSFileType === NSFileTypeRegular },\n    isSocket: function() { return result.NSFileType === NSFileTypeSocket },\n    isSymbolicLink: function() { return result.NSFileType === NSFileTypeSymbolicLink },\n  }\n}\n\nmodule.exports.symlinkSync = function(target, path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.createSymbolicLinkAtPath_withDestinationPath_error(path, target, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.truncateSync = function(path, len) {\n  var hFile = NSFileHandle.fileHandleForUpdatingAtPath(sFilePath)\n  hFile.truncateFileAtOffset(len || 0)\n  hFile.closeFile()\n}\n\nmodule.exports.unlinkSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.removeItemAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.utimesSync = function(path, aTime, mTime) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.setAttributes_ofItemAtPath_error({\n    NSFileModificationDate: aTime\n  }, path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.writeFileSync = function(path, data, options) {\n  var encoding = encodingFromOptions(options, 'utf8')\n\n  var nsdata = Buffer.from(\n    data, encoding === 'NSData' || encoding === 'buffer' ? undefined : encoding\n  ).toNSData()\n\n  nsdata.writeToFile_atomically(path, true)\n}\n","import sketch from \"sketch\";\n\nlet md = \"\";\nconst imgRegex = /^image-/;\n\nconst processLayers = (layer, directoryPath) => {\n  // process groups but ignore images group layers or symbols\n  if (layer.type === \"Group\" && !layer.name.match(imgRegex)) {\n    layer.layers.reverse().map(layer => {\n      processLayers(layer);\n    });\n  } else {\n    parseToMd(layer.name, layer, directoryPath);\n  }\n};\n\nconst readLayers = (allLayers, artboardName, directoryPath) => {\n  allLayers.map(layer => {\n    if (layer.type === \"Artboard\" && layer.name === artboardName) {\n      layer.layers.reverse().map(layer => {\n        processLayers(layer, directoryPath);\n      });\n    }\n  });\n};\n\nconst parseToMd = (layerName, layer, directoryPath) => {\n  // if layer starts with image* set the layerName to image\n  layerName = layerName.match(imgRegex) ? \"image\" : layerName;\n\n  switch (layerName) {\n    case \"heading1\":\n      md += `# ${layer.text.trim()}\\n`;\n      break;\n    case \"heading2\":\n      md += `## ${layer.text.trim()}\\n`;\n      break;\n    case \"heading3\":\n      md += `### ${layer.text.trim()}\\n`;\n      break;\n    case \"heading4\":\n      md += `#### ${layer.text.trim()}\\n`;\n      break;\n    case \"image\":\n      sketch.export(layer, {\n        formats: \"jpg\",\n        output: directoryPath,\n        overwriting: true,\n        scales: \"1\"\n      });\n      md += `![](./${layer.name}.jpg)\\n\\n`;\n      break;\n    case \"list\":\n      layer.text\n        .trim()\n        .split(\"\\n\")\n        .forEach((listItem, key, content) => {\n          md += `* ${listItem}\\n${\n            Object.is(content.length - 1, key) ? \"\\n\" : \"\"\n          }`;\n        });\n      break;\n    case \"paragraph-multi\":\n      layer.text\n        .trim()\n        .split(\"\\n\")\n        .forEach((paragraph, key, content) => {\n          md += `${paragraph}\\n${\n            Object.is(content.length - 1, key) ? \"\\n\" : \"\"\n          }`;\n        });\n      break;\n    case \"paragraph\":\n      md += `${layer.text.trim()}\\n\\n`;\n  }\n};\n\nconst getMdContent = (allLayers, artboardName, directoryPath) => {\n  readLayers(allLayers, artboardName, directoryPath);\n  return md;\n};\n\nexport default getMdContent;\n","import sketch from \"sketch\";\nimport fs from \"@skpm/fs\";\n\nimport getMdContent from \"./parse-layers\";\n\nconst saveMd = (path, docName, artboardName, content) => {\n  fs.writeFileSync(`${path}${docName}-${artboardName}.md`, content, \"utf8\");\n};\n\nexport default function() {\n  const doc = sketch.getSelectedDocument();\n  const docName = doc.sketchObject.displayName().replace(\".sketch\", \"\"); // remove sketch extension\n  const directoryPath = doc.path.replace(doc.sketchObject.displayName(), \"\"); // remove filename\n  const page = doc.selectedPage;\n  const allLayers = page.layers;\n\n  let artboards = [];\n\n  allLayers.forEach(layer => {\n    if (layer.type === \"Artboard\") {\n      artboards.push(layer.name);\n    }\n  });\n\n  if (artboards.length === 0) {\n    sketch.UI.message(\n      \"You have no artboards in your page. You need at least one.\"\n    );\n  } else {\n    const selection = sketch.UI.getSelectionFromUser(\n      \"Which artboard you want to export to markdown\",\n      artboards.reverse()\n    );\n    const ok = selection[2];\n    const selectedArtboard = artboards[selection[1]];\n    if (ok) {\n      try {\n        saveMd(\n          directoryPath,\n          docName,\n          selectedArtboard,\n          getMdContent(allLayers, selectedArtboard, directoryPath)\n        );\n        sketch.UI.message(\n          `🎉 ${selectedArtboard} was successfully exported to markdown 🎉`\n        );\n      } catch (err) {\n        sketch.UI.message(`${err}. Try again.`);\n      }\n    }\n  }\n}\n","module.exports = require(\"buffer\");","module.exports = require(\"sketch\");"],"sourceRoot":""}